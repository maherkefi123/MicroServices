services:

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: societe_db
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - mysql_data:/var/lib/mysql
    restart: on-failure

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - mongodb_data:/data/db
    restart: on-failure

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_STANDALONE_ENABLED: "true"
      ZOO_4LW_COMMANDS_WHITELIST: "*"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 30s
    restart: on-failure

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 40s
    restart: on-failure

  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_SERVER_WAIT_TIME_IN_MS_WHEN_SYNC_EMPTY: "0"
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 45s
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 180s
    depends_on:
      discovery-server:
        condition: service_healthy
    restart: on-failure

  employee-service:
    build: ./employee-service
    container_name: employee-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "10"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "3000"
      SPRING_CLOUD_CONFIG_REQUEST_READ_TIMEOUT: "10000"
      SPRING_CLOUD_CONFIG_REQUEST_CONNECT_TIMEOUT: "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: on-failure

  societe-service:
    build: ./societe-service
    container_name: societe-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: "30000"
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT: "false"
      SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "10"
      SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "3000"
      SPRING_CLOUD_CONFIG_REQUEST_READ_TIMEOUT: "10000"
      SPRING_CLOUD_CONFIG_REQUEST_CONNECT_TIMEOUT: "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s
    depends_on:
      societe-service:
        condition: service_healthy
      employee-service:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    restart: on-failure

volumes:
  mysql_data:
  mongodb_data:
